[{"/mnt/x/Users/bjjak/Desktop/Prosjekter/bugsquasher/src/index.js":"1","/mnt/x/Users/bjjak/Desktop/Prosjekter/bugsquasher/src/components/user/Users.jsx":"2","/mnt/x/Users/bjjak/Desktop/Prosjekter/bugsquasher/src/components/user/Profile.jsx":"3","/mnt/x/Users/bjjak/Desktop/Prosjekter/bugsquasher/src/components/auth/PrivateRoute.jsx":"4","/mnt/x/Users/bjjak/Desktop/Prosjekter/bugsquasher/src/components/layout/NavBar.jsx":"5","/mnt/x/Users/bjjak/Desktop/Prosjekter/bugsquasher/src/components/user/DeleteUser.jsx":"6","/mnt/x/Users/bjjak/Desktop/Prosjekter/bugsquasher/src/components/layout/CreateIssue.jsx":"7"},{"size":795,"mtime":1606581409161,"results":"8","hashOfConfig":"9"},{"size":6776,"mtime":1603032052282,"results":"10","hashOfConfig":"9"},{"size":2814,"mtime":1605317450727,"results":"11","hashOfConfig":"9"},{"size":514,"mtime":1605398873850,"results":"12","hashOfConfig":"9"},{"size":13295,"mtime":1606581407567,"results":"13","hashOfConfig":"9"},{"size":2073,"mtime":1602502419671,"results":"14","hashOfConfig":"9"},{"size":18082,"mtime":1606639720307,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kh2guj",{"filePath":"18","messages":"19","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/x/Users/bjjak/Desktop/Prosjekter/bugsquasher/src/index.js",[],"/mnt/x/Users/bjjak/Desktop/Prosjekter/bugsquasher/src/components/user/Users.jsx",["32"],"/* eslint-disable react/display-name */\n/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport useReactRouter from 'use-react-router'\nimport Paper from '@material-ui/core/Paper'\nimport MaterialTable from 'material-table'\nimport axios from 'axios'\nimport TextField from '@material-ui/core/TextField'\nimport { registerUser, getUsers, findUserProfile } from '../utils/api-user'\nimport auth from '../auth/auth-helper'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '70%',\n    marginTop: theme.spacing(12),\n    marginLeft: 290,\n    overflowX: 'auto',\n    borderRadius: 14\n  },\n  table: {\n    minWidth: 500\n  },\n  tableWrapper: {\n    maxHeight: 900,\n    overflow: 'auto'\n  },\n  label: {\n    display: 'inline',\n    padding: '.2em .6em .3em',\n    fontSize: '75%',\n    fontWeight: 700,\n    lineHeight: 1,\n    backgroundColor: 'lightblue',\n    color: '#000',\n    textAlign: 'center',\n    whiteSpace: 'nowrap',\n    verticalAlign: 'baseline',\n    borderRadius: '.25em'\n  }\n}))\n\nexport default function Users (props) {\n  const [userList] = useState({\n    columns: [\n      { title: 'ID', field: '_id', editable: 'never' },\n      {\n        title: 'Navn',\n        field: 'name',\n        editable: 'always',\n        editComponent: (props) => (\n          <TextField\n            type=\"text\"\n            variant=\"outlined\"\n            // eslint-disable-next-line react/destructuring-assignment\n            value={props.value}\n            size=\"small\"\n            onChange={(e) => props.onChange(e.target.value)}\n          />\n        )\n      },\n      {\n        title: 'Rolle',\n        field: 'role',\n        editable: 'always',\n        lookup: { Bruker: 'Bruker', Admin: 'Admin' }\n      },\n      {\n        title: 'Rettigheter',\n        field: 'rights',\n        editable: 'always',\n        lookup: { Les: 'Les', Skriv: 'Skriv' }\n      },\n      {\n        title: 'E-Post',\n        field: 'email',\n        editable: 'always',\n        editComponent: (props) => (\n          <TextField\n            type=\"text\"\n            variant=\"outlined\"\n            // eslint-disable-next-line react/destructuring-assignment\n            value={props.value}\n            size=\"small\"\n            onChange={(e) => props.onChange(e.target.value)}\n          />\n        )\n      },\n      {\n        title: 'Endre passord',\n        field: 'password',\n        editable: 'always',\n        editComponent: (props) => (\n          <form>\n          <TextField\n            autoComplete=\"new-password\"\n            type=\"password\"\n            variant=\"outlined\"\n            size=\"small\"\n            onChange={(e) => props.onChange(e.target.value)}\n          /></form>\n        )\n      }\n    ]\n  })\n\n  const { match } = useReactRouter()\n  const state = {\n    redirectToSignin: false\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  const [values, setValues] = useState(state)\n  const [users, setUsers] = useState([])\n  const [myself, setMyself] = useState([])\n\n  const init = (userId) => {\n    const jwt = auth.isAuthenticated();\n    findUserProfile(\n      {\n        userId: userId,\n      },\n      { t: jwt.token }\n    ).then((myself) => {\n      if (myself.error) {\n        setValues({ redirectToSignin: true });\n      } else {\n        setMyself(myself);\n      }\n    });\n\n    getUsers({ t: jwt.token }).then((data) => {\n      if (data.error) {\n        setValues({ redirectToSignin: true })\n      } else {\n        setUsers(data.data)\n      }\n    });\n  }\n\n  useEffect(() => {\n    if (!myself.length) {\n      init(match.params.userId)\n    }\n  }, [myself.length, match.params.userId])\n\n  // Slett bruker\n  const deleteFromDB = (idTodelete) => {\n    axios.delete('/api/removeUser', {\n      data: {\n        _id: idTodelete\n      },\n    })\n    init(match.params.userId)\n  }\n\n  // Rediger bruker\n  const updateUser = (idToBeUpdated, _name, _role, _rights, _email) => {\n    axios.post('/api/edituser', {\n      _id: idToBeUpdated,\n      role: myself.role,\n      update: {\n        name: _name,\n        role: _role,\n        rights: _rights,\n        email: _email\n      }\n    })\n  }\n\n  const classes = useStyles()\n\n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n        <React.Fragment key=\"key\">\n          <MaterialTable\n            options={{\n              headerStyle: {\n                backgroundColor: '#48305F',\n                color: '#FFF'\n              },\n              rowStyle: {\n                boxShadow: '0 3px 5px rgba(51, 51, 51, 0.1)'\n              }\n            }}\n            title=\"Bruker administrasjon\"\n            columns={userList.columns}\n            data={users}\n            editable={{\n              onRowAdd: (newData) => new Promise((resolve, reject) => {\n                setTimeout(() => {\n                  {\n                    const user = {\n                      name: newData.name || undefined,\n                      email: newData.email || undefined,\n                      password: newData.password || undefined\n                    }\n                    registerUser(user).then((data) => {\n                      if (data.error) {\n                        setValues({ error: data.error })\n                      } else {\n                        setValues({ error: '', open: true })\n                      }\n                    })\n                  }\n                  init()\n                  resolve(newData)\n                  reject(new Error('Noe gikk galt!'))\n                }, 1000)\n              }),\n              onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n                setTimeout(() => {\n                  {\n                    const data = users\n                    const index = data.indexOf(oldData)\n                    data[index] = newData\n                    setUsers(data)\n                    updateUser(\n                      data[index]._id,\n                      data[index].name,\n                      data[index].role,\n                      data[index].rights,\n                      data[index].email\n                    )\n                  }\n                  init(match.params.userId)\n                  resolve(newData)\n                  reject(new Error('Noe gikk galt!'))\n                }, 1000)\n              }),\n              onRowDelete: (oldData) => new Promise((resolve) => {\n                setTimeout(() => {\n                  {\n                    const data = users\n                    const index = data.indexOf(oldData)\n                    deleteFromDB(data[index]._id)\n                  }\n                  init(match.params.userId)\n                  resolve()\n                }, 1000)\n              })\n            }}\n          />\n        </React.Fragment>\n      </div>\n    </Paper>\n  )\n}\n",[],"/mnt/x/Users/bjjak/Desktop/Prosjekter/bugsquasher/src/components/user/Profile.jsx",[],"/mnt/x/Users/bjjak/Desktop/Prosjekter/bugsquasher/src/components/auth/PrivateRoute.jsx",[],"/mnt/x/Users/bjjak/Desktop/Prosjekter/bugsquasher/src/components/layout/NavBar.jsx",["33"],"/mnt/x/Users/bjjak/Desktop/Prosjekter/bugsquasher/src/components/user/DeleteUser.jsx",[],"/mnt/x/Users/bjjak/Desktop/Prosjekter/bugsquasher/src/components/layout/CreateIssue.jsx",[],{"ruleId":"34","severity":2,"message":"35","line":43,"column":32,"nodeType":"36","messageId":"37","endLine":43,"endColumn":37},{"ruleId":"38","severity":2,"message":"39","line":196,"column":7,"nodeType":"40","messageId":"41","endLine":196,"endColumn":8,"fix":"42"},"no-unused-vars","'props' is defined but never used.","Identifier","unusedVar","operator-linebreak","'?' should be placed at the end of the line.","ConditionalExpression","operatorAtEnd",{"range":"43","text":"44"},[5619,5628]," ?\n      "]